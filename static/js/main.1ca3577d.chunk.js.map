{"version":3,"sources":["types/index.tsx","utils/index.tsx","constants/index.tsx","components/NumberDisplay/index.tsx","components/Button/index.tsx","components/App/index.tsx","index.tsx"],"names":["CellValue","CellState","Face","grabAllAbjectnessCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","value","none","state","open","cells2","numberOfBombs","bombPlaced","randomRow","Math","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","generateBombs","currentCell","openMultipleCells","visible","flagged","newCells","slice","NumberDisplay","className","abs","toString","padStart","Button","onClick","onContext","onContextMenu","role","aria-label","renderContent","App","useState","setCells","smile","face","setFace","time","setTime","live","setLive","bombCounter","setBombCounter","useEffect","handleMouseDownAndUp","e","target","startsWith","type","oh","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","handleCellClick","includes","console","log","handleCellRightClick","preventDefault","currentCells","cellIndex","length","cc","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ca3577d.chunk.js","sourcesContent":["export enum CellValue {\r\n  none,\r\n  one,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  seven,\r\n  eight,\r\n  bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  open,\r\n  visible,\r\n  flagged,\r\n}\r\n\r\nexport type Cell = {\r\n  value: CellValue;\r\n  state: CellState;\r\n};\r\n\r\nexport enum Face {\r\n  smile = \"😁\",\r\n  oh = \"😮\",\r\n  lost = \"😵\",\r\n  won = \"😎\",\r\n}\r\n","import { MAX_ROWS, MAX_COLS, NO_OF_BOMBS } from \"../constants\";\r\nimport { Cell, CellState, CellValue } from \"../types\";\r\n\r\n// eslint-disable-next-line\r\nconst generateBombs = (\r\n  cells2: Cell[][],\r\n  numberOfBombs: number = NO_OF_BOMBS\r\n) => {\r\n  let cells = [...cells2];\r\n  let bombPlaced = 0;\r\n  while (bombPlaced < numberOfBombs) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    const currentCell = cells[randomRow][randomCol];\r\n    if (currentCell.value !== CellValue.bomb) {\r\n      cells = cells.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (randomRow === rowIndex && randomCol === colIndex) {\r\n            return { ...cell, value: CellValue.bomb };\r\n          } else {\r\n            return cell;\r\n          }\r\n        })\r\n      );\r\n      bombPlaced++;\r\n    }\r\n  }\r\n  return cells;\r\n};\r\n\r\n// eslint-disable-next-line\r\nconst generateFlags = (cells2: Cell[][], countFlag: number = 5) => {\r\n  let cells = [...cells2];\r\n  let flagPlaced = 0;\r\n  while (flagPlaced < countFlag) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    const currentCell = cells[randomRow][randomCol];\r\n    if (currentCell.state !== CellState.flagged) {\r\n      cells = cells.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (randomRow === rowIndex && randomCol === colIndex) {\r\n            return { ...cell, state: CellState.flagged };\r\n          } else {\r\n            return cell;\r\n          }\r\n        })\r\n      );\r\n      flagPlaced++;\r\n    }\r\n  }\r\n  return cells;\r\n};\r\n\r\nconst grabAllAbjectnessCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): {\r\n  topLeftCell: Cell | null;\r\n  topCell: Cell | null;\r\n  topRightCell: Cell | null;\r\n  leftCell: Cell | null;\r\n  rightCell: Cell | null;\r\n  bottomLeftCell: Cell | null;\r\n  bottomCell: Cell | null;\r\n  bottomRightCell: Cell | null;\r\n} => {\r\n  const topLeftCell =\r\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n  const topRightCell =\r\n    rowParam > 0 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam - 1][colParam + 1]\r\n      : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n  const rightCell =\r\n    colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n  const bottomLeftCell =\r\n    rowParam < MAX_ROWS - 1 && colParam > 0\r\n      ? cells[rowParam + 1][colParam - 1]\r\n      : null;\r\n  const bottomCell =\r\n    rowParam < MAX_ROWS - 1 && rowParam < MAX_ROWS - 1\r\n      ? cells[rowParam + 1][colParam]\r\n      : null;\r\n  const bottomRightCell =\r\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam + 1][colParam + 1]\r\n      : null;\r\n  return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  };\r\n};\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n\r\n  // Generate all Cells\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({ value: CellValue.none, state: CellState.open }); // TODO: Thus default is must be state: CellState.open\r\n    }\r\n  }\r\n\r\n  // Randomly put 10 bombs\r\n  cells = generateBombs(cells, NO_OF_BOMBS);\r\n\r\n  // Randomly put 5 flags\r\n  // cells = generateFlags(cells, 5);\r\n\r\n  // Calculate the number for each cell\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n      if (currentCell.value === CellValue.bomb) {\r\n        continue;\r\n      }\r\n\r\n      let numberOfBombs = 0;\r\n      const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell,\r\n      } = grabAllAbjectnessCells(cells, rowIndex, colIndex);\r\n\r\n      if (topLeftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (topCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (topRightCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (leftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (rightCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomLeftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomRightCell?.value === CellValue.bomb) numberOfBombs++;\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIndex][colIndex] = {\r\n          ...currentCell,\r\n          value: numberOfBombs,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  let currentCell = cells[rowParam][colParam];\r\n  if (\r\n    currentCell.state === CellState.visible ||\r\n    currentCell.state === CellState.flagged\r\n  ) {\r\n    return cells;\r\n  }\r\n  let newCells: Cell[][] = cells.slice();\r\n  newCells[rowParam][colParam].state = CellState.visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  } = grabAllAbjectnessCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell?.state === CellState.open &&\r\n    topLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    topLeftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1))\r\n      : (newCells[rowParam - 1][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n    topCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam))\r\n      : (newCells[rowParam - 1][colParam].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    topRightCell?.state === CellState.open &&\r\n    topRightCell.value !== CellValue.bomb\r\n  ) {\r\n    topRightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1))\r\n      : (newCells[rowParam - 1][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n    leftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam, colParam - 1))\r\n      : (newCells[rowParam][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    rightCell?.state === CellState.open &&\r\n    rightCell.value !== CellValue.bomb\r\n  ) {\r\n    rightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam, colParam + 1))\r\n      : (newCells[rowParam][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell?.state === CellState.open &&\r\n    bottomLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomLeftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1))\r\n      : (newCells[rowParam + 1][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomCell?.state === CellState.open &&\r\n    bottomCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam))\r\n      : (newCells[rowParam + 1][colParam].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomRightCell?.state === CellState.open &&\r\n    bottomRightCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomRightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1))\r\n      : (newCells[rowParam + 1][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;\r\n","import React from \"react\";\r\nimport \"./NumberDisplay.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      <span>\r\n        {value < 0\r\n          ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\r\n          : value.toString().padStart(3, \"0\")}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import React from \"react\";\r\nimport { CellState, CellValue } from \"../../types\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button: React.FC<{\r\n  row: number;\r\n  col: number;\r\n  state: CellState;\r\n  value: CellValue;\r\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n}> = ({ state, value, row, col, onClick, onContext }) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (state === CellState.visible) {\r\n      if (value === CellValue.bomb) {\r\n        return (\r\n          <span role={\"img\"} aria-label=\"bomb\">\r\n            💣\r\n          </span>\r\n        );\r\n      } else if (value !== CellValue.none) {\r\n        return <span>{value}</span>;\r\n      } else if (value === CellValue.none) {\r\n        return null;\r\n      }\r\n    } else if (state === CellState.flagged) {\r\n      return (\r\n        <span role=\"img\" aria-label=\"flag\">\r\n          🚩\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Button ${\r\n        state === CellState.visible ? \"visible\" : \"\"\r\n      } value-${value}`}\r\n      onClick={onClick(row, col)}\r\n      onContextMenu={onContext(row, col)}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Cell, CellState, CellValue, Face } from \"../../types\";\r\nimport { generateCells, openMultipleCells } from \"../../utils\";\r\nimport NumberDisplay from \"../NumberDisplay\";\r\nimport Button from \"../Button\";\r\nimport \"./App.scss\";\r\nimport { NO_OF_BOMBS } from \"../../constants\";\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.smile);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [live, setLive] = useState<boolean>(false);\r\n  const [bombCounter, setBombCounter] = useState(NO_OF_BOMBS);\r\n\r\n  useEffect(() => {\r\n    const handleMouseDownAndUp = (e: any): void => {\r\n      let isButton: boolean = e.target.className\r\n        .toString()\r\n        .startsWith(\"Button\");\r\n      if (isButton) {\r\n        if (e.type === \"mouseup\") {\r\n          setFace(Face.smile);\r\n        } else if (e.type === \"mousedown\") {\r\n          setFace(Face.oh);\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener(\"mouseup\", handleMouseDownAndUp);\r\n    window.addEventListener(\"mousedown\", handleMouseDownAndUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mouseup\", handleMouseDownAndUp);\r\n      window.removeEventListener(\"mousedown\", handleMouseDownAndUp);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (live && time < 999) {\r\n      const timer = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }\r\n  }, [live, time]);\r\n\r\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n    if (!live) {\r\n      // TODO: Check for Bomb\r\n\r\n      setLive(true);\r\n    }\r\n\r\n    let newCells: Cell[][] = cells.slice();\r\n    const currentCell = cells[rowParam][colParam];\r\n\r\n    if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\r\n      console.log(\"Click on flag or visible\");\r\n      // newCells = openMultipleCells(cells.slice(), rowParam, colParam);\r\n      return;\r\n    }\r\n\r\n    if (currentCell.value === CellValue.bomb) {\r\n      // TODO: Take care of bomb click\r\n    } else if (currentCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(cells, rowParam, colParam);\r\n      // TODO: Do that\r\n    } else {\r\n      newCells[rowParam][colParam].state = CellState.visible;\r\n    }\r\n\r\n    setCells(newCells);\r\n\r\n    // console.log(\"Left click\", rowParam, colParam);\r\n  };\r\n  const handleCellRightClick = (rowParam: number, colParam: number) => (\r\n    e: React.MouseEvent<HTMLDivElement>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (!live) {\r\n      return;\r\n    }\r\n\r\n    const currentCells = cells.slice();\r\n    const currentCell = cells[rowParam][colParam];\r\n    if (currentCell.state === CellState.visible) {\r\n      return;\r\n    } else if (currentCell.state === CellState.open && bombCounter > -99) {\r\n      currentCells[rowParam][colParam].state = CellState.flagged;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter - 1);\r\n    } else if (currentCell.state === CellState.flagged) {\r\n      currentCells[rowParam][colParam].state = CellState.open;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter + 1);\r\n    }\r\n  };\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, cellIndex) => {\r\n        return (\r\n          <Button\r\n            key={`${rowIndex - cellIndex}`}\r\n            state={cell.state}\r\n            value={cell.value}\r\n            onClick={handleCellClick}\r\n            onContext={handleCellRightClick}\r\n            row={rowIndex}\r\n            col={cellIndex}\r\n          />\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleFaceClick = (): void => {\r\n    console.log(\"Click face\");\r\n    if (live) {\r\n      setLive(false);\r\n      setTime(0);\r\n      setCells(generateCells());\r\n    }\r\n  };\r\n\r\n  const handleRevalBombs = () => {\r\n    let newCells = cells.slice();\r\n    for (let rowIndex = 0; rowIndex < newCells.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < newCells.length; colIndex++) {\r\n        let cc = cells[rowIndex][colIndex];\r\n        console.log(cc);\r\n        if (cc.state !== CellState.visible) {\r\n          if (cc.state !== CellState.flagged) {\r\n            if (cc.value !== CellValue.bomb) {\r\n              cc.state = CellState.visible;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setCells(newCells);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Header\">\r\n        <NumberDisplay value={bombCounter} />\r\n        <div className=\"Face\">\r\n          <span role=\"img\" aria-label=\"face\" onClick={handleFaceClick}>\r\n            {face}\r\n          </span>\r\n        </div>\r\n        <NumberDisplay value={time} />\r\n      </div>\r\n      <div className=\"Body\">{renderCells()}</div>\r\n      <button onClick={handleRevalBombs}>Reval</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}