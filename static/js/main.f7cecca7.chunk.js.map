{"version":3,"sources":["types/index.tsx","utils/index.tsx","constants/index.tsx","components/NumberDisplay.tsx","components/Button.tsx","components/Mineseeper.tsx","serviceWorker.js","index.js"],"names":["CellValue","CellState","Face","grabAllAbjectnessCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","value","none","state","open","cells2","numberOfBombs","bombPlaced","randomRow","Math","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","generateBombs","currentCell","NumberDisplay","className","abs","toString","padStart","Button","onClick","onContext","red","live","hesDie","onDoubleClick","visible","onContextMenu","role","aria-label","flagged","renderContent","App","useState","setCells","smile","face","setFace","time","setTime","setLive","bombCounter","setBombCounter","hesLost","setHesLost","hesWon","setHesWon","useEffect","handleMouseDownAndUp","e","target","startsWith","type","oh","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","showAllBombs","lost","won","handleDoubleClick","handleCellClick","nFlags","check","test","res","console","log","checkAllow","checkFlagAroundMe","checkBombsAroundMe","newCells","slice","includes","openMultipleCells","getSafeOpenCellsExist","numberOfOpenCells","forEach","rows","handleCellRightClick","preventDefault","currentCells","testServer","axios","get","then","response","data","owner","games","catch","clear","cellIndex","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7cecca7.chunk.js","sourcesContent":["export enum CellValue {\r\n  none,\r\n  one,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  seven,\r\n  eight,\r\n  bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  open,\r\n  visible,\r\n  flagged,\r\n}\r\n\r\nexport type Cell = {\r\n  value: CellValue;\r\n  state: CellState;\r\n  red?: boolean;\r\n};\r\n\r\nexport enum Face {\r\n  smile = \"😁\",\r\n  oh = \"😮\",\r\n  lost = \"😵\",\r\n  won = \"😎\",\r\n}\r\n","import { MAX_ROWS, MAX_COLS, NO_OF_BOMBS } from \"../constants\";\r\nimport { Cell, CellState, CellValue } from \"../types\";\r\n\r\nconst generateBombs = (\r\n  cells2: Cell[][],\r\n  numberOfBombs: number = NO_OF_BOMBS\r\n) => {\r\n  let cells = [...cells2];\r\n  let bombPlaced = 0;\r\n\r\n  while (bombPlaced < numberOfBombs) {\r\n    let randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    let randomCol = Math.floor(Math.random() * MAX_ROWS);\r\n    // let randomRow = genNumber(MAX_ROWS, bomb?.row);\r\n    // let randomCol = genNumber(MAX_COLS, bomb?.col);\r\n\r\n    // if (bomb && (bomb.row === randomRow || bomb.col === randomCol)) {\r\n    //   console.log(\"bombeee\");\r\n    //   // randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    //   randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    // }\r\n    const currentCell = cells[randomRow][randomCol];\r\n    if (currentCell.value !== CellValue.bomb) {\r\n      cells = cells.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (randomRow === rowIndex && randomCol === colIndex) {\r\n            return { ...cell, value: CellValue.bomb };\r\n          } else {\r\n            return cell;\r\n          }\r\n        })\r\n      );\r\n      bombPlaced++;\r\n    }\r\n  }\r\n  return cells;\r\n};\r\n\r\nconst grabAllAbjectnessCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): {\r\n  topLeftCell: Cell | null;\r\n  topCell: Cell | null;\r\n  topRightCell: Cell | null;\r\n  leftCell: Cell | null;\r\n  rightCell: Cell | null;\r\n  bottomLeftCell: Cell | null;\r\n  bottomCell: Cell | null;\r\n  bottomRightCell: Cell | null;\r\n} => {\r\n  const topLeftCell =\r\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n  const topRightCell =\r\n    rowParam > 0 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam - 1][colParam + 1]\r\n      : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n  const rightCell =\r\n    colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n  const bottomLeftCell =\r\n    rowParam < MAX_ROWS - 1 && colParam > 0\r\n      ? cells[rowParam + 1][colParam - 1]\r\n      : null;\r\n  const bottomCell =\r\n    rowParam < MAX_ROWS - 1 && rowParam < MAX_ROWS - 1\r\n      ? cells[rowParam + 1][colParam]\r\n      : null;\r\n  const bottomRightCell =\r\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam + 1][colParam + 1]\r\n      : null;\r\n  return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  };\r\n};\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n  // Generate all Cells\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({ value: CellValue.none, state: CellState.open });\r\n    }\r\n  }\r\n\r\n  // Randomly put 10 bombs\r\n  cells = generateBombs(cells, NO_OF_BOMBS);\r\n\r\n  // Calculate the number for each cell\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n      if (currentCell.value === CellValue.bomb) {\r\n        continue;\r\n      }\r\n\r\n      let numberOfBombs = 0;\r\n      const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell,\r\n      } = grabAllAbjectnessCells(cells, rowIndex, colIndex);\r\n\r\n      if (topLeftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (topCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (topRightCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (leftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (rightCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomLeftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomRightCell?.value === CellValue.bomb) numberOfBombs++;\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIndex][colIndex] = {\r\n          ...currentCell,\r\n          value: numberOfBombs,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  let currentCell = cells[rowParam][colParam];\r\n  if (\r\n    currentCell.state === CellState.visible ||\r\n    currentCell.state === CellState.flagged\r\n  ) {\r\n    return cells;\r\n  }\r\n  let newCells: Cell[][] = cells.slice();\r\n  newCells[rowParam][colParam].state = CellState.visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  } = grabAllAbjectnessCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell?.state === CellState.open &&\r\n    topLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    topLeftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1))\r\n      : (newCells[rowParam - 1][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n    topCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam))\r\n      : (newCells[rowParam - 1][colParam].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    topRightCell?.state === CellState.open &&\r\n    topRightCell.value !== CellValue.bomb\r\n  ) {\r\n    topRightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1))\r\n      : (newCells[rowParam - 1][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n    leftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam, colParam - 1))\r\n      : (newCells[rowParam][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    rightCell?.state === CellState.open &&\r\n    rightCell.value !== CellValue.bomb\r\n  ) {\r\n    rightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam, colParam + 1))\r\n      : (newCells[rowParam][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell?.state === CellState.open &&\r\n    bottomLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomLeftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1))\r\n      : (newCells[rowParam + 1][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomCell?.state === CellState.open &&\r\n    bottomCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam))\r\n      : (newCells[rowParam + 1][colParam].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomRightCell?.state === CellState.open &&\r\n    bottomRightCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomRightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1))\r\n      : (newCells[rowParam + 1][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;\r\n","import React from \"react\";\r\nimport \"../styles/NumberDisplay.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      <span>\r\n        {value < 0\r\n          ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\r\n          : value.toString().padStart(3, \"0\")}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import React from \"react\";\r\nimport { CellState, CellValue } from \"../types\";\r\nimport \"../styles/Button.scss\";\r\n\r\nconst Button: React.FC<{\r\n  row: number;\r\n  col: number;\r\n  state: CellState;\r\n  value: CellValue;\r\n  live: boolean;\r\n  red?: boolean;\r\n  hesDie: boolean;\r\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  onDoubleClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n}> = ({\r\n  state,\r\n  value,\r\n  row,\r\n  col,\r\n  onClick,\r\n  onContext,\r\n  red,\r\n  live,\r\n  hesDie,\r\n  onDoubleClick,\r\n}) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (state === CellState.visible) {\r\n      if (value === CellValue.bomb) {\r\n        return (\r\n          <span role={\"img\"} aria-label=\"bomb\">\r\n            💣\r\n          </span>\r\n        );\r\n      } else if (value !== CellValue.none) {\r\n        return <span>{value}</span>;\r\n      } else if (value === CellValue.none) {\r\n        return null;\r\n      }\r\n    } else if (state === CellState.flagged) {\r\n      return (\r\n        <span role=\"img\" aria-label=\"flag\">\r\n          🚩\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <button\r\n      // style={{ backgroundColor: \"transparent\" }}\r\n      className={`Button ${\r\n        state === CellState.visible ? \"visible\" : \"\"\r\n      } value-${value} ${red ? \"red\" : \"\"} ${live ? \"live\" : \"\"}`}\r\n      onContextMenu={onContext(row, col)}\r\n      onDoubleClick={onDoubleClick(row, col)}\r\n      onClick={!hesDie ? onClick(row, col) : () => {}}\r\n    >\r\n      {renderContent()}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Cell, CellState, CellValue, Face } from \"../types\";\r\nimport { generateCells, openMultipleCells } from \"../utils\";\r\nimport NumberDisplay from \"./NumberDisplay\";\r\nimport Button from \"./Button\";\r\nimport \"../styles/App.scss\";\r\nimport { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from \"../constants\";\r\nimport axios from \"axios\";\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.smile);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [live, setLive] = useState<boolean>(false);\r\n  const [bombCounter, setBombCounter] = useState<number>(NO_OF_BOMBS);\r\n  const [hesLost, setHesLost] = useState<boolean>(false);\r\n  const [hesWon, setHesWon] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const handleMouseDownAndUp = (e: any): void => {\r\n      if (!live) {\r\n        return;\r\n      }\r\n      let isButton: boolean = e.target.className\r\n        .toString()\r\n        .startsWith(\"Button\");\r\n      if (isButton) {\r\n        if (e.type === \"mouseup\") {\r\n          setFace(Face.smile);\r\n        } else if (e.type === \"mousedown\") {\r\n          setFace(Face.oh);\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener(\"mouseup\", handleMouseDownAndUp);\r\n    window.addEventListener(\"mousedown\", handleMouseDownAndUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mouseup\", handleMouseDownAndUp);\r\n      window.removeEventListener(\"mousedown\", handleMouseDownAndUp);\r\n    };\r\n  }, [live]);\r\n\r\n  useEffect(() => {\r\n    if (live && time < 999) {\r\n      const timer = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }\r\n  }, [live, time]);\r\n\r\n  useEffect(() => {\r\n    if (hesLost) {\r\n      setCells(showAllBombs());\r\n      setLive(false);\r\n      setFace(Face.lost);\r\n    } else {\r\n      setFace(Face.smile);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [hesLost]);\r\n\r\n  useEffect(() => {\r\n    if (hesWon) {\r\n      setLive(false);\r\n      setFace(Face.won);\r\n    }\r\n  }, [hesWon]);\r\n\r\n  const handleDoubleClick = (\r\n    rowParam: number,\r\n    colParam: number\r\n  ) => (): void => {\r\n    // let newCells: Cell[][] = cells.slice();\r\n    // const currentCell = newCells[rowParam][colParam];\r\n    // if (\r\n    //   currentCell.value !== CellValue.bomb &&\r\n    //   currentCell.value !== CellValue.none\r\n    // ) {\r\n    //   if (live) {\r\n    //     handleCellClick(rowParam - 1, colParam)();\r\n    //     handleCellClick(rowParam - 1, colParam - 1)();\r\n    //     handleCellClick(rowParam - 1, colParam + 1)();\r\n    //     handleCellClick(rowParam, colParam - 1)();\r\n    //     handleCellClick(rowParam, colParam + 1)();\r\n    //     handleCellClick(rowParam + 1, colParam)();\r\n    //     handleCellClick(rowParam + 1, colParam - 1)();\r\n    //     handleCellClick(rowParam + 1, colParam + 1)();\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  const checkBombsAroundMe = (row: number, col: number): boolean => {\r\n    const checkFlagAroundMe = (row: number, col: number): number => {\r\n      const check = (row: number, col: number, test?: boolean): string => {\r\n        const checkAllow = (row: number, col: number): boolean => {\r\n          let res = true;\r\n          if (row < 0 || col < 0) {\r\n            res = false;\r\n          }\r\n          if (row >= MAX_ROWS || col >= MAX_COLS) {\r\n            res = false;\r\n          }\r\n          return res;\r\n        };\r\n        let res: string = \"\";\r\n        if (test) {\r\n          console.log({ row, col });\r\n        }\r\n        if (checkAllow(row, col)) {\r\n          if (cells[row][col].state === CellState.flagged) {\r\n            res = \"flag\";\r\n          }\r\n          if (cells[row][col].value === CellValue.bomb) {\r\n            res = \"bomb\";\r\n          }\r\n        }\r\n        return res;\r\n      };\r\n\r\n      let nFlags = 0;\r\n\r\n      if (check(row - 1, col - 1) === \"flag\") nFlags++;\r\n      if (check(row - 1, col) === \"flag\") nFlags++;\r\n      if (check(row - 1, col + 1) === \"flag\") nFlags++;\r\n\r\n      if (check(row, col - 1) === \"flag\") nFlags++;\r\n      if (check(row, col + 1) === \"flag\") nFlags++;\r\n\r\n      if (check(row + 1, col - 1) === \"flag\") nFlags++;\r\n      if (check(row + 1, col, true) === \"flag\") nFlags++;\r\n      if (check(row + 1, col + 1) === \"flag\") nFlags++;\r\n\r\n      return nFlags;\r\n    };\r\n\r\n    let res = false;\r\n    let nFlags = checkFlagAroundMe(row, col);\r\n    console.log(\"hi bombs\", { nFlags, row, col });\r\n    return res;\r\n  };\r\n\r\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n    if (\r\n      rowParam < 0 ||\r\n      colParam >= MAX_COLS ||\r\n      colParam < 0 ||\r\n      rowParam >= MAX_ROWS\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (checkBombsAroundMe(rowParam, colParam)) {\r\n      return;\r\n    }\r\n    let newCells: Cell[][] = cells.slice();\r\n\r\n    if (!live) {\r\n      // let isBomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n      // if (isBomb) {\r\n      //   newCells = gg(rowParam, colParam).slice();\r\n      // }\r\n      // while (isBomb) {\r\n      //   newCells = generateCells();\r\n      //   isBomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n      // }\r\n      setLive(true);\r\n    }\r\n\r\n    const currentCell = newCells[rowParam][colParam];\r\n\r\n    if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\r\n      return;\r\n    }\r\n\r\n    if (currentCell.value === CellValue.bomb) {\r\n      setHesLost(true);\r\n      newCells[rowParam][colParam].red = true;\r\n      newCells[rowParam][colParam].state = CellState.visible;\r\n      newCells = showAllBombs();\r\n\r\n      setCells(newCells);\r\n      return;\r\n    } else if (currentCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(cells, rowParam, colParam);\r\n    } else {\r\n      // Click on a number\r\n      newCells[rowParam][colParam].state = CellState.visible;\r\n    }\r\n\r\n    // Check Won\r\n    let safeOpenCellsExist: boolean = getSafeOpenCellsExist(cells);\r\n    if (!safeOpenCellsExist) {\r\n      newCells.map((row) =>\r\n        row.map((cell) => {\r\n          if (cell.value === CellValue.bomb) {\r\n            return { ...cell, state: CellState.flagged };\r\n          }\r\n          return cell;\r\n        })\r\n      );\r\n    }\r\n\r\n    if (currentCell.state !== CellState.visible) {\r\n      currentCell.state = CellState.visible;\r\n    }\r\n\r\n    setCells(newCells);\r\n  };\r\n\r\n  const getSafeOpenCellsExist = (cells: Cell[][]) => {\r\n    let numberOfOpenCells = 0;\r\n    cells.forEach((rows) =>\r\n      rows.forEach((currentCell) => {\r\n        if (\r\n          currentCell.value !== CellValue.bomb &&\r\n          currentCell.state === CellState.open\r\n        ) {\r\n          numberOfOpenCells++;\r\n        }\r\n      })\r\n    );\r\n\r\n    return numberOfOpenCells > 0;\r\n  };\r\n\r\n  const handleCellRightClick = (rowParam: number, colParam: number) => (\r\n    e: React.MouseEvent<HTMLDivElement>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (!live) {\r\n      return;\r\n    }\r\n\r\n    const currentCells = cells.slice();\r\n    const currentCell = cells[rowParam][colParam];\r\n\r\n    if (currentCell.state === CellState.visible) {\r\n      return;\r\n    } else if (currentCell.state === CellState.open && bombCounter > -99) {\r\n      currentCells[rowParam][colParam].state = CellState.flagged;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter - 1);\r\n    } else if (currentCell.state === CellState.flagged) {\r\n      currentCells[rowParam][colParam].state = CellState.open;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter + 1);\r\n    }\r\n    // if (checkWin) {\r\n    //   setHesWon(true);\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (getSafeOpenCellsExist(cells) && bombCounter === 0) {\r\n      setHesWon(true);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [bombCounter]);\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, cellIndex) => {\r\n        return (\r\n          <Button\r\n            live={live}\r\n            hesDie={hesLost || hesWon}\r\n            key={`${rowIndex - cellIndex}`}\r\n            state={cell.state}\r\n            value={cell.value}\r\n            red={cell.red}\r\n            onClick={handleCellClick}\r\n            onDoubleClick={handleDoubleClick}\r\n            onContext={handleCellRightClick}\r\n            row={rowIndex}\r\n            col={cellIndex}\r\n          />\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleFaceClick = (): void => {\r\n    setLive(false);\r\n    setTime(0);\r\n    setBombCounter(NO_OF_BOMBS);\r\n    setCells(generateCells());\r\n    setHesLost(false);\r\n    setHesWon(false);\r\n    setFace(Face.smile);\r\n    console.clear();\r\n  };\r\n\r\n  const showAllBombs = (): Cell[][] => {\r\n    let currentCells = cells.slice();\r\n\r\n    return currentCells.map((row) =>\r\n      row.map((cell) => {\r\n        if (cell.value === CellValue.bomb) {\r\n          return { ...cell, state: CellState.visible };\r\n        }\r\n        return cell;\r\n      })\r\n    );\r\n  };\r\n\r\n  const testServer = () => {\r\n    axios\r\n      .get(\"/api\")\r\n      .then((response) => {\r\n        const data = response.data;\r\n        data.forEach((data: any) => {\r\n          // eslint-disable-next-line\r\n          let { owner, games } = data;\r\n        });\r\n\r\n        console.log(\"Data has been received!!\");\r\n      })\r\n      .catch(() => {\r\n        // alert(\"Error retrieving data!!!\");\r\n      });\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const submit = () => {\r\n    const oneGame = {\r\n      time: 10,\r\n      date: new Date(),\r\n    };\r\n    const twoGame = {\r\n      time: 20,\r\n      date: new Date(),\r\n    };\r\n    const allGames = [oneGame, twoGame];\r\n\r\n    const payload = {\r\n      owner: \"rame\",\r\n      games: allGames,\r\n    };\r\n\r\n    axios({\r\n      url: \"/api/save\",\r\n      method: \"POST\",\r\n      data: payload,\r\n    })\r\n      .then(() => {\r\n        console.log(\"Data has been sent to the server\");\r\n        testServer();\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    testServer();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <button onClick={submit}>create games</button> */}\r\n      <div className=\"Header\">\r\n        <NumberDisplay value={bombCounter} />\r\n        <div className=\"Face\">\r\n          <span role=\"img\" aria-label=\"face\" onClick={handleFaceClick}>\r\n            {face}\r\n          </span>\r\n        </div>\r\n        <NumberDisplay value={time} />\r\n      </div>\r\n      <div className=\"Body\">{renderCells()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/Mineseeper\";\n// import App from \"../../client2/src/components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}