{"version":3,"sources":["types/index.tsx","utils/index.tsx","constants/index.tsx","components/NumberDisplay.tsx","components/Button.tsx","components/Mineseeper.tsx","serviceWorker.js","index.js"],"names":["CellValue","CellState","Face","grabAllAbjectnessCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","value","none","state","open","cells2","numberOfBombs","bombPlaced","randomRow","Math","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","generateBombs","currentCell","NumberDisplay","className","abs","toString","padStart","Button","onClick","onContext","red","live","hesDie","visible","onContextMenu","role","aria-label","flagged","renderContent","App","useState","setCells","smile","face","setFace","time","setTime","setLive","bombCounter","setBombCounter","hesLost","setHesLost","hesWon","setHesWon","useEffect","handleMouseDownAndUp","e","target","startsWith","type","oh","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","showAllBombs","useCallback","slice","bombs","lost","won","setVisibleAroundMe3","res","nFlags","nFBombs","nFBombsArr","i","j","nBombs","nBingo","distinct","length","indexOf","forEach","el","checkBombsAroundMe","handleCellClick","fromReval","newCells","openMultipleCells","handleCellRightClick","preventDefault","currentCells","numberOfOpenCells","rows","getSafeOpenCellsExist","cellIndex","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e232423f.chunk.js","sourcesContent":["export enum CellValue {\r\n  none,\r\n  one,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  seven,\r\n  eight,\r\n  bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  open,\r\n  visible,\r\n  flagged,\r\n}\r\n\r\nexport type Cell = {\r\n  value: CellValue;\r\n  state: CellState;\r\n  red?: boolean;\r\n};\r\n\r\nexport enum Face {\r\n  smile = \"😁\",\r\n  oh = \"😮\",\r\n  lost = \"😵\",\r\n  won = \"😎\",\r\n}\r\n","import { MAX_ROWS, MAX_COLS, NO_OF_BOMBS } from \"../constants\";\r\nimport { Cell, CellState, CellValue } from \"../types\";\r\n\r\nconst generateBombs = (\r\n  cells2: Cell[][],\r\n  numberOfBombs: number = NO_OF_BOMBS\r\n) => {\r\n  let cells = [...cells2];\r\n  let bombPlaced = 0;\r\n\r\n  while (bombPlaced < numberOfBombs) {\r\n    let randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    let randomCol = Math.floor(Math.random() * MAX_ROWS);\r\n    // let randomRow = genNumber(MAX_ROWS, bomb?.row);\r\n    // let randomCol = genNumber(MAX_COLS, bomb?.col);\r\n\r\n    // if (bomb && (bomb.row === randomRow || bomb.col === randomCol)) {\r\n    //   console.log(\"bombeee\");\r\n    //   // randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    //   randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    // }\r\n    const currentCell = cells[randomRow][randomCol];\r\n    if (currentCell.value !== CellValue.bomb) {\r\n      cells = cells.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (randomRow === rowIndex && randomCol === colIndex) {\r\n            return { ...cell, value: CellValue.bomb };\r\n          } else {\r\n            return cell;\r\n          }\r\n        })\r\n      );\r\n      bombPlaced++;\r\n    }\r\n  }\r\n  return cells;\r\n};\r\n\r\nconst grabAllAbjectnessCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): {\r\n  topLeftCell: Cell | null;\r\n  topCell: Cell | null;\r\n  topRightCell: Cell | null;\r\n  leftCell: Cell | null;\r\n  rightCell: Cell | null;\r\n  bottomLeftCell: Cell | null;\r\n  bottomCell: Cell | null;\r\n  bottomRightCell: Cell | null;\r\n} => {\r\n  const topLeftCell =\r\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n  const topRightCell =\r\n    rowParam > 0 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam - 1][colParam + 1]\r\n      : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n  const rightCell =\r\n    colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n  const bottomLeftCell =\r\n    rowParam < MAX_ROWS - 1 && colParam > 0\r\n      ? cells[rowParam + 1][colParam - 1]\r\n      : null;\r\n  const bottomCell =\r\n    rowParam < MAX_ROWS - 1 && rowParam < MAX_ROWS - 1\r\n      ? cells[rowParam + 1][colParam]\r\n      : null;\r\n  const bottomRightCell =\r\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam + 1][colParam + 1]\r\n      : null;\r\n  return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  };\r\n};\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n  // Generate all Cells\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({ value: CellValue.none, state: CellState.open });\r\n    }\r\n  }\r\n\r\n  // Randomly put 10 bombs\r\n  cells = generateBombs(cells, NO_OF_BOMBS);\r\n\r\n  // Calculate the number for each cell\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n      if (currentCell.value === CellValue.bomb) {\r\n        continue;\r\n      }\r\n\r\n      let numberOfBombs = 0;\r\n      const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell,\r\n      } = grabAllAbjectnessCells(cells, rowIndex, colIndex);\r\n\r\n      if (topLeftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (topCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (topRightCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (leftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (rightCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomLeftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomRightCell?.value === CellValue.bomb) numberOfBombs++;\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIndex][colIndex] = {\r\n          ...currentCell,\r\n          value: numberOfBombs,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  let currentCell = cells[rowParam][colParam];\r\n  if (\r\n    currentCell.state === CellState.visible ||\r\n    currentCell.state === CellState.flagged\r\n  ) {\r\n    return cells;\r\n  }\r\n  let newCells: Cell[][] = cells.slice();\r\n  newCells[rowParam][colParam].state = CellState.visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  } = grabAllAbjectnessCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell?.state === CellState.open &&\r\n    topLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    topLeftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1))\r\n      : (newCells[rowParam - 1][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n    topCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam))\r\n      : (newCells[rowParam - 1][colParam].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    topRightCell?.state === CellState.open &&\r\n    topRightCell.value !== CellValue.bomb\r\n  ) {\r\n    topRightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1))\r\n      : (newCells[rowParam - 1][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n    leftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam, colParam - 1))\r\n      : (newCells[rowParam][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    rightCell?.state === CellState.open &&\r\n    rightCell.value !== CellValue.bomb\r\n  ) {\r\n    rightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam, colParam + 1))\r\n      : (newCells[rowParam][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell?.state === CellState.open &&\r\n    bottomLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomLeftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1))\r\n      : (newCells[rowParam + 1][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomCell?.state === CellState.open &&\r\n    bottomCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam))\r\n      : (newCells[rowParam + 1][colParam].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomRightCell?.state === CellState.open &&\r\n    bottomRightCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomRightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1))\r\n      : (newCells[rowParam + 1][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;\r\n","import React from \"react\";\r\nimport \"../styles/NumberDisplay.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      <span>\r\n        {value < 0\r\n          ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\r\n          : value.toString().padStart(3, \"0\")}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import React from \"react\";\r\nimport { CellState, CellValue } from \"../types\";\r\nimport \"../styles/Button.scss\";\r\n\r\nconst Button: React.FC<{\r\n  row: number;\r\n  col: number;\r\n  state: CellState;\r\n  value: CellValue;\r\n  live: boolean;\r\n  red?: boolean;\r\n  hesDie: boolean;\r\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n}> = ({ state, value, row, col, onClick, onContext, red, live, hesDie }) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (state === CellState.visible) {\r\n      if (value === CellValue.bomb) {\r\n        return (\r\n          <span role={\"img\"} aria-label=\"bomb\">\r\n            💣\r\n          </span>\r\n        );\r\n      } else if (value !== CellValue.none) {\r\n        return <span>{value}</span>;\r\n      } else if (value === CellValue.none) {\r\n        return null;\r\n      }\r\n    } else if (state === CellState.flagged) {\r\n      return (\r\n        <span role=\"img\" aria-label=\"flag\">\r\n          🚩\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <button\r\n      // style={{ backgroundColor: \"transparent\" }}\r\n      className={`Button ${\r\n        state === CellState.visible ? \"visible\" : \"\"\r\n      } value-${value} ${red ? \"red\" : \"\"} ${live ? \"live\" : \"\"}`}\r\n      onContextMenu={onContext(row, col)}\r\n      onClick={!hesDie ? onClick(row, col) : () => {}}\r\n    >\r\n      {renderContent()}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Cell, CellState, CellValue, Face } from \"../types\";\r\nimport { generateCells, openMultipleCells } from \"../utils\";\r\nimport NumberDisplay from \"./NumberDisplay\";\r\nimport Button from \"./Button\";\r\nimport \"../styles/App.scss\";\r\nimport { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from \"../constants\";\r\nimport axios from \"axios\";\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.smile);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [live, setLive] = useState<boolean>(false);\r\n  const [bombCounter, setBombCounter] = useState<number>(NO_OF_BOMBS);\r\n  const [hesLost, setHesLost] = useState<boolean>(false);\r\n  const [hesWon, setHesWon] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const handleMouseDownAndUp = (e: any): void => {\r\n      if (!live) {\r\n        return;\r\n      }\r\n      let isButton: boolean = e.target.className\r\n        .toString()\r\n        .startsWith(\"Button\");\r\n      if (isButton) {\r\n        if (e.type === \"mouseup\") {\r\n          setFace(Face.smile);\r\n        } else if (e.type === \"mousedown\") {\r\n          setFace(Face.oh);\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener(\"mouseup\", handleMouseDownAndUp);\r\n    window.addEventListener(\"mousedown\", handleMouseDownAndUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mouseup\", handleMouseDownAndUp);\r\n      window.removeEventListener(\"mousedown\", handleMouseDownAndUp);\r\n    };\r\n  }, [live]);\r\n\r\n  useEffect(() => {\r\n    if (live && time < 999) {\r\n      const timer = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }\r\n  }, [live, time]);\r\n\r\n  const showAllBombs = useCallback((): Cell[][] => {\r\n    let currentCells = cells.slice();\r\n\r\n    return currentCells.map((row) =>\r\n      row.map((cell) => {\r\n        if (cell.value === CellValue.bomb) {\r\n          return { ...cell, state: CellState.visible };\r\n        }\r\n        return cell;\r\n      })\r\n    );\r\n  }, [cells]);\r\n\r\n  useEffect(() => {\r\n    if (hesLost) {\r\n      let bombs = showAllBombs();\r\n      setCells(bombs);\r\n      setFace(Face.lost);\r\n      setLive(false);\r\n    }\r\n    if (hesWon) {\r\n      setFace(Face.won);\r\n      setLive(false);\r\n    }\r\n  }, [hesLost, hesWon, showAllBombs]);\r\n\r\n  const checkBombsAroundMe = (row: number, col: number): boolean => {\r\n    let nFlags = 0;\r\n    // eslint-disable-next-line\r\n    let nBombs = 0;\r\n    let nFBombs = 0;\r\n    let nFBombsArr = [];\r\n\r\n    for (let i = 0; i < MAX_ROWS; i++) {\r\n      for (let j = 0; j < MAX_COLS; j++) {\r\n        if (i === row - 1 && j === col - 1) {\r\n          if (cells[i][j].state === CellState.flagged) {\r\n            nFlags++;\r\n          }\r\n          if (cells[i][j].value === CellValue.bomb) {\r\n            nBombs++;\r\n          }\r\n          if (\r\n            cells[i][j].value === CellValue.bomb &&\r\n            cells[i][j].state === CellState.flagged\r\n          ) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nFBombs++;\r\n          }\r\n        }\r\n        if (i === row - 1 && j === col) {\r\n          if (cells[i][j].state === CellState.flagged) {\r\n            nFlags++;\r\n          }\r\n          if (cells[i][j].value === CellValue.bomb) {\r\n            nBombs++;\r\n          }\r\n          if (\r\n            cells[i][j].value === CellValue.bomb &&\r\n            cells[i][j].state === CellState.flagged\r\n          ) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nFBombs++;\r\n          }\r\n        }\r\n        if (i === row - 1 && j === col + 1) {\r\n          if (cells[i][j].state === CellState.flagged) {\r\n            nFlags++;\r\n          }\r\n          if (cells[i][j].value === CellValue.bomb) {\r\n            nBombs++;\r\n          }\r\n          if (\r\n            cells[i][j].value === CellValue.bomb &&\r\n            cells[i][j].state === CellState.flagged\r\n          ) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nFBombs++;\r\n          }\r\n        }\r\n        if (i === row && j === col - 1) {\r\n          if (cells[i][j].state === CellState.flagged) {\r\n            nFlags++;\r\n          }\r\n          if (cells[i][j].value === CellValue.bomb) {\r\n            nBombs++;\r\n          }\r\n          if (\r\n            cells[i][j].value === CellValue.bomb &&\r\n            cells[i][j].state === CellState.flagged\r\n          ) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nFBombs++;\r\n          }\r\n        }\r\n        if (i === row && j === col + 1) {\r\n          if (cells[i][j].state === CellState.flagged) {\r\n            nFlags++;\r\n          }\r\n          if (cells[i][j].value === CellValue.bomb) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nBombs++;\r\n          }\r\n          if (\r\n            cells[i][j].value === CellValue.bomb &&\r\n            cells[i][j].state === CellState.flagged\r\n          ) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nFBombs++;\r\n          }\r\n        }\r\n        if (i === row + 1 && j === col - 1) {\r\n          if (cells[i][j].state === CellState.flagged) {\r\n            nFlags++;\r\n          }\r\n          if (cells[i][j].value === CellValue.bomb) {\r\n            nBombs++;\r\n          }\r\n          if (\r\n            cells[i][j].value === CellValue.bomb &&\r\n            cells[i][j].state === CellState.flagged\r\n          ) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nFBombs++;\r\n          }\r\n        }\r\n        if (i === row + 1 && j === col) {\r\n          if (cells[i][j].state === CellState.flagged) {\r\n            nFlags++;\r\n          }\r\n          if (cells[i][j].value === CellValue.bomb) {\r\n            nBombs++;\r\n          }\r\n          if (\r\n            cells[i][j].value === CellValue.bomb &&\r\n            cells[i][j].state === CellState.flagged\r\n          ) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nFBombs++;\r\n          }\r\n        }\r\n        if (i === row + 1 && j === col + 1) {\r\n          if (cells[i][j].state === CellState.flagged) {\r\n            nFlags++;\r\n          }\r\n          if (cells[i][j].value === CellValue.bomb) {\r\n            nBombs++;\r\n          }\r\n          if (\r\n            cells[i][j].value === CellValue.bomb &&\r\n            cells[i][j].state === CellState.flagged\r\n          ) {\r\n            nFBombsArr.push({ row: i, col: j });\r\n            nFBombs++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let nBingo = 0;\r\n\r\n    let distinct: any[] = [];\r\n    for (let i = 0; i < nFBombsArr.length; i++) {\r\n      if (distinct.indexOf(nFBombsArr[i]) === -1) {\r\n        distinct.push(nFBombsArr[i]);\r\n      }\r\n    }\r\n    nFBombsArr = distinct;\r\n\r\n    nFBombsArr.forEach((el) => {\r\n      if (\r\n        el.row === row - 1 &&\r\n        el.col === col - 1 &&\r\n        cells[row - 1][col - 1].state === CellState.flagged &&\r\n        cells[row][col].value !== CellValue.bomb &&\r\n        cells[row][col].value !== CellValue.none &&\r\n        cells[row][col].value === nFBombs\r\n      ) {\r\n        // console.log(\"bingo1\", row, col);\r\n        nBingo++;\r\n      }\r\n      if (\r\n        el.row === row - 1 &&\r\n        el.col === col &&\r\n        cells[row - 1][col].state === CellState.flagged &&\r\n        cells[row][col].value !== CellValue.bomb &&\r\n        cells[row][col].value !== CellValue.none &&\r\n        cells[row][col].value === nFBombs\r\n      ) {\r\n        // console.log(\"bingo2\", row, col);\r\n        nBingo++;\r\n      }\r\n      if (\r\n        el.row === row - 1 &&\r\n        el.col === col + 1 &&\r\n        cells[row - 1][col + 1].state === CellState.flagged &&\r\n        cells[row][col].value !== CellValue.bomb &&\r\n        cells[row][col].value !== CellValue.none &&\r\n        cells[row][col].value === nFBombs\r\n      ) {\r\n        // console.log(\"bingo3\", row, col);\r\n        nBingo++;\r\n      }\r\n      if (\r\n        el.row === row &&\r\n        el.col === col + 1 &&\r\n        cells[row][col + 1].state === CellState.flagged &&\r\n        cells[row][col].value !== CellValue.bomb &&\r\n        cells[row][col].value !== CellValue.none &&\r\n        cells[row][col].value === nFBombs\r\n      ) {\r\n        // console.log(\"bingo4\", row, col);\r\n        nBingo++;\r\n      }\r\n      if (\r\n        el.row === row &&\r\n        el.col === col - 1 &&\r\n        cells[row][col - 1].state === CellState.flagged &&\r\n        cells[row][col].value !== CellValue.bomb &&\r\n        cells[row][col].value !== CellValue.none &&\r\n        cells[row][col].value === nFBombs\r\n      ) {\r\n        // console.log(\"bingo5\", row, col);\r\n        nBingo++;\r\n      }\r\n      if (\r\n        el.row === row + 1 &&\r\n        el.col === col - 1 &&\r\n        cells[row + 1][col - 1].state === CellState.flagged &&\r\n        cells[row][col].value !== CellValue.bomb &&\r\n        cells[row][col].value !== CellValue.none &&\r\n        cells[row][col].value === nFBombs\r\n      ) {\r\n        // console.log(\"bingo6\", row, col);\r\n        nBingo++;\r\n      }\r\n      if (\r\n        el.row === row + 1 &&\r\n        el.col === col &&\r\n        cells[row + 1][col].state === CellState.flagged &&\r\n        cells[row][col].value !== CellValue.bomb &&\r\n        cells[row][col].value !== CellValue.none &&\r\n        cells[row][col].value === nFBombs\r\n      ) {\r\n        // console.log(\"bingo7\", row, col);\r\n        nBingo++;\r\n      }\r\n      if (\r\n        el.row === row + 1 &&\r\n        el.col === col + 1 &&\r\n        cells[row + 1][col + 1].state === CellState.flagged &&\r\n        cells[row][col].value !== CellValue.bomb &&\r\n        cells[row][col].value !== CellValue.none &&\r\n        cells[row][col].value === nFBombs\r\n      ) {\r\n        // console.log(\"bingo8\", row, col);\r\n        nBingo++;\r\n      }\r\n    });\r\n\r\n    let res = nBingo > 0 && nBingo === nFlags;\r\n\r\n    return res;\r\n  };\r\n\r\n  const setVisibleAroundMe3 = (row: number, col: number): Cell[][] => {\r\n    let res = cells.slice();\r\n    if (checkBombsAroundMe(row, col)) {\r\n      if (\r\n        row - 1 > 0 &&\r\n        col - 1 > 0 &&\r\n        res[row - 1][col - 1].state !== CellState.visible &&\r\n        res[row - 1][col - 1].state !== CellState.flagged\r\n      ) {\r\n        handleCellClick(row - 1, col - 1, true)();\r\n      }\r\n      if (\r\n        row - 1 > 0 &&\r\n        res[row - 1][col].state !== CellState.visible &&\r\n        res[row - 1][col].state !== CellState.flagged\r\n      ) {\r\n        handleCellClick(row - 1, col, true)();\r\n      }\r\n      if (\r\n        row - 1 > 0 &&\r\n        col + 1 < MAX_COLS &&\r\n        res[row - 1][col + 1].state !== CellState.visible &&\r\n        res[row - 1][col + 1].state !== CellState.flagged\r\n      ) {\r\n        handleCellClick(row - 1, col + 1, true)();\r\n      }\r\n      if (\r\n        col - 1 > 0 &&\r\n        res[row][col - 1].state !== CellState.visible &&\r\n        res[row][col - 1].state !== CellState.flagged\r\n      ) {\r\n        handleCellClick(row, col - 1, true)();\r\n      }\r\n      if (\r\n        col + 1 < MAX_COLS &&\r\n        res[row][col + 1].state !== CellState.visible &&\r\n        res[row][col + 1].state !== CellState.flagged\r\n      ) {\r\n        handleCellClick(row, col + 1, true)();\r\n      }\r\n      if (\r\n        row + 1 < MAX_ROWS &&\r\n        col - 1 > 0 &&\r\n        res[row + 1][col - 1].state !== CellState.visible &&\r\n        res[row + 1][col - 1].state !== CellState.flagged\r\n      ) {\r\n        handleCellClick(row + 1, col - 1, true)();\r\n      }\r\n      if (\r\n        row + 1 < MAX_ROWS &&\r\n        res[row + 1][col].state !== CellState.visible &&\r\n        res[row + 1][col].state !== CellState.flagged\r\n      ) {\r\n        handleCellClick(row + 1, col, true)();\r\n      }\r\n      if (\r\n        row + 1 < MAX_ROWS &&\r\n        col + 1 < MAX_ROWS &&\r\n        res[row + 1][col + 1].state !== CellState.visible &&\r\n        res[row + 1][col + 1].state !== CellState.flagged\r\n      ) {\r\n        handleCellClick(row + 1, col + 1, true)();\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const handleCellClick = (\r\n    rowParam: number,\r\n    colParam: number,\r\n    fromReval?: boolean\r\n  ) => (): void => {\r\n    if (\r\n      rowParam < 0 ||\r\n      colParam >= MAX_COLS ||\r\n      colParam < 0 ||\r\n      rowParam >= MAX_ROWS\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let newCells: Cell[][] = cells.slice();\r\n    if (!live) {\r\n      // let isBomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n      // if (isBomb) {\r\n      //   newCells = gg(rowParam, colParam).slice();\r\n      // }\r\n      // while (isBomb) {\r\n      //   newCells = generateCells();\r\n      //   isBomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n      // }\r\n      setLive(true);\r\n    }\r\n\r\n    if (fromReval !== true) {\r\n      newCells = setVisibleAroundMe3(rowParam, colParam);\r\n    }\r\n\r\n    const currentCell = newCells[rowParam][colParam];\r\n\r\n    if (currentCell.value === CellValue.bomb) {\r\n      setHesLost(true);\r\n      newCells[rowParam][colParam].red = true;\r\n      newCells[rowParam][colParam].state = CellState.visible;\r\n      newCells = showAllBombs();\r\n\r\n      setCells(newCells);\r\n      return;\r\n    } else if (currentCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(cells, rowParam, colParam);\r\n    } else {\r\n      // Click on a number\r\n      newCells[rowParam][colParam].state = CellState.visible;\r\n    }\r\n\r\n    // Check Won\r\n    // let safeOpenCellsExist: boolean = getSafeOpenCellsExist(cells);\r\n    // if (!safeOpenCellsExist) {\r\n    //   newCells.map((row) =>\r\n    //     row.map((cell) => {\r\n    //       if (cell.value === CellValue.bomb) {\r\n    //         return { ...cell, state: CellState.flagged };\r\n    //       }\r\n    //       return cell;\r\n    //     })\r\n    //   );\r\n    // }\r\n\r\n    // if (currentCell.state !== CellState.visible) {\r\n    //   currentCell.state = CellState.visible;\r\n    // }\r\n\r\n    setCells(newCells);\r\n  };\r\n\r\n  const getSafeOpenCellsExist = (cells: Cell[][]) => {\r\n    let numberOfOpenCells = 0;\r\n    cells.forEach((rows) =>\r\n      rows.forEach((currentCell) => {\r\n        if (\r\n          currentCell.value !== CellValue.bomb &&\r\n          currentCell.state === CellState.open\r\n        ) {\r\n          numberOfOpenCells++;\r\n        }\r\n      })\r\n    );\r\n\r\n    return numberOfOpenCells > 0;\r\n  };\r\n\r\n  const handleCellRightClick = (rowParam: number, colParam: number) => (\r\n    e: React.MouseEvent<HTMLDivElement>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (!live) {\r\n      return;\r\n    }\r\n\r\n    const currentCells = cells.slice();\r\n    const currentCell = cells[rowParam][colParam];\r\n\r\n    if (currentCell.state === CellState.visible) {\r\n      return;\r\n    } else if (currentCell.state === CellState.open && bombCounter > -99) {\r\n      currentCells[rowParam][colParam].state = CellState.flagged;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter - 1);\r\n    } else if (currentCell.state === CellState.flagged) {\r\n      currentCells[rowParam][colParam].state = CellState.open;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter + 1);\r\n    }\r\n    // if (checkWin) {\r\n    //   setHesWon(true);\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (getSafeOpenCellsExist(cells) && bombCounter === 0) {\r\n      setHesWon(true);\r\n    }\r\n  }, [bombCounter, cells]);\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, cellIndex) => {\r\n        return (\r\n          <Button\r\n            live={live}\r\n            hesDie={hesLost || hesWon}\r\n            key={`${rowIndex - cellIndex}`}\r\n            state={cell.state}\r\n            value={cell.value}\r\n            red={cell.red}\r\n            onClick={handleCellClick}\r\n            onContext={handleCellRightClick}\r\n            row={rowIndex}\r\n            col={cellIndex}\r\n          />\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleFaceClick = (): void => {\r\n    setLive(false);\r\n    setTime(0);\r\n    setBombCounter(NO_OF_BOMBS);\r\n    setCells(generateCells());\r\n    setHesLost(false);\r\n    setHesWon(false);\r\n    setFace(Face.smile);\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const submit = () => {\r\n    const testServer = () => {\r\n      axios\r\n        .get(\"/api\")\r\n        .then((response) => {\r\n          const data = response.data;\r\n          data.forEach((data: any) => {\r\n            alert(`${data.owner} have ${data.games.length} games!`);\r\n          });\r\n        })\r\n        .catch(() => {\r\n          // alert(\"Error retrieving data!!!\");\r\n        });\r\n    };\r\n\r\n    const oneGame = {\r\n      time: 10,\r\n      date: new Date(),\r\n    };\r\n    const twoGame = {\r\n      time: 20,\r\n      date: new Date(),\r\n    };\r\n    const allGames = [oneGame, twoGame];\r\n\r\n    const payload = {\r\n      owner: \"rame\",\r\n      games: allGames,\r\n    };\r\n\r\n    axios({\r\n      url: \"/api/save\",\r\n      method: \"POST\",\r\n      data: payload,\r\n    })\r\n      .then(() => {\r\n        console.log(\"Data has been sent to the server\");\r\n        testServer();\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <button onClick={submit}>create games</button> */}\r\n      <div className=\"Header\">\r\n        <NumberDisplay value={bombCounter} />\r\n        <div className=\"Face\">\r\n          <span role=\"img\" aria-label=\"face\" onClick={handleFaceClick}>\r\n            {face}\r\n          </span>\r\n        </div>\r\n        <NumberDisplay value={time} />\r\n      </div>\r\n      <div className=\"Body\">{renderCells()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/Mineseeper\";\n// import App from \"../../client2/src/components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}