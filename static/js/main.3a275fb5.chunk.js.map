{"version":3,"sources":["types/index.tsx","utils/index.tsx","constants/index.tsx","components/NumberDisplay/index.tsx","components/Button/index.tsx","components/App/index.tsx","index.tsx"],"names":["CellValue","CellState","Face","grabAllAbjectnessCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","value","none","state","open","cells2","numberOfBombs","bombPlaced","randomRow","Math","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","generateBombs","currentCell","openMultipleCells","visible","flagged","newCells","slice","NumberDisplay","className","abs","toString","padStart","Button","onClick","onContext","red","live","hesDie","onContextMenu","role","aria-label","renderContent","App","useState","setCells","smile","face","setFace","time","setTime","setLive","bombCounter","setBombCounter","hesLost","setHesLost","hesWon","setHesWon","useEffect","handleMouseDownAndUp","e","target","startsWith","type","oh","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","lost","won","handleCellClick","isBomb","includes","showAllBombs","getSafeOpenCellsExist","numberOfOpenCells","forEach","rows","handleCellRightClick","preventDefault","currentCells","cellIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a275fb5.chunk.js","sourcesContent":["export enum CellValue {\r\n  none,\r\n  one,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  seven,\r\n  eight,\r\n  bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  open,\r\n  visible,\r\n  flagged,\r\n}\r\n\r\nexport type Cell = {\r\n  value: CellValue;\r\n  state: CellState;\r\n  red?: boolean;\r\n};\r\n\r\nexport enum Face {\r\n  smile = \"üòÅ\",\r\n  oh = \"üòÆ\",\r\n  lost = \"üòµ\",\r\n  won = \"üòé\",\r\n}\r\n","import { MAX_ROWS, MAX_COLS, NO_OF_BOMBS } from \"../constants\";\r\nimport { Cell, CellState, CellValue } from \"../types\";\r\n\r\nconst generateBombs = (\r\n  cells2: Cell[][],\r\n  numberOfBombs: number = NO_OF_BOMBS\r\n) => {\r\n  let cells = [...cells2];\r\n  let bombPlaced = 0;\r\n  while (bombPlaced < numberOfBombs) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    const currentCell = cells[randomRow][randomCol];\r\n    if (currentCell.value !== CellValue.bomb) {\r\n      cells = cells.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (randomRow === rowIndex && randomCol === colIndex) {\r\n            return { ...cell, value: CellValue.bomb };\r\n          } else {\r\n            return cell;\r\n          }\r\n        })\r\n      );\r\n      bombPlaced++;\r\n    }\r\n  }\r\n  return cells;\r\n};\r\n\r\nconst grabAllAbjectnessCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): {\r\n  topLeftCell: Cell | null;\r\n  topCell: Cell | null;\r\n  topRightCell: Cell | null;\r\n  leftCell: Cell | null;\r\n  rightCell: Cell | null;\r\n  bottomLeftCell: Cell | null;\r\n  bottomCell: Cell | null;\r\n  bottomRightCell: Cell | null;\r\n} => {\r\n  const topLeftCell =\r\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n  const topRightCell =\r\n    rowParam > 0 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam - 1][colParam + 1]\r\n      : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n  const rightCell =\r\n    colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n  const bottomLeftCell =\r\n    rowParam < MAX_ROWS - 1 && colParam > 0\r\n      ? cells[rowParam + 1][colParam - 1]\r\n      : null;\r\n  const bottomCell =\r\n    rowParam < MAX_ROWS - 1 && rowParam < MAX_ROWS - 1\r\n      ? cells[rowParam + 1][colParam]\r\n      : null;\r\n  const bottomRightCell =\r\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam + 1][colParam + 1]\r\n      : null;\r\n  return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  };\r\n};\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n\r\n  // Generate all Cells\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({ value: CellValue.none, state: CellState.open });\r\n    }\r\n  }\r\n\r\n  // Randomly put 10 bombs\r\n  cells = generateBombs(cells, NO_OF_BOMBS);\r\n\r\n  // Calculate the number for each cell\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n      if (currentCell.value === CellValue.bomb) {\r\n        continue;\r\n      }\r\n\r\n      let numberOfBombs = 0;\r\n      const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell,\r\n      } = grabAllAbjectnessCells(cells, rowIndex, colIndex);\r\n\r\n      if (topLeftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (topCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (topRightCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (leftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (rightCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomLeftCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomCell?.value === CellValue.bomb) numberOfBombs++;\r\n      if (bottomRightCell?.value === CellValue.bomb) numberOfBombs++;\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIndex][colIndex] = {\r\n          ...currentCell,\r\n          value: numberOfBombs,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  let currentCell = cells[rowParam][colParam];\r\n  if (\r\n    currentCell.state === CellState.visible ||\r\n    currentCell.state === CellState.flagged\r\n  ) {\r\n    return cells;\r\n  }\r\n  let newCells: Cell[][] = cells.slice();\r\n  newCells[rowParam][colParam].state = CellState.visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  } = grabAllAbjectnessCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell?.state === CellState.open &&\r\n    topLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    topLeftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1))\r\n      : (newCells[rowParam - 1][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n    topCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam))\r\n      : (newCells[rowParam - 1][colParam].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    topRightCell?.state === CellState.open &&\r\n    topRightCell.value !== CellValue.bomb\r\n  ) {\r\n    topRightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1))\r\n      : (newCells[rowParam - 1][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n    leftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam, colParam - 1))\r\n      : (newCells[rowParam][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    rightCell?.state === CellState.open &&\r\n    rightCell.value !== CellValue.bomb\r\n  ) {\r\n    rightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam, colParam + 1))\r\n      : (newCells[rowParam][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell?.state === CellState.open &&\r\n    bottomLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomLeftCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1))\r\n      : (newCells[rowParam + 1][colParam - 1].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomCell?.state === CellState.open &&\r\n    bottomCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam))\r\n      : (newCells[rowParam + 1][colParam].state = CellState.visible);\r\n  }\r\n\r\n  if (\r\n    bottomRightCell?.state === CellState.open &&\r\n    bottomRightCell.value !== CellValue.bomb\r\n  ) {\r\n    bottomRightCell.value === CellValue.none\r\n      ? (newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1))\r\n      : (newCells[rowParam + 1][colParam + 1].state = CellState.visible);\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;\r\n","import React from \"react\";\r\nimport \"./NumberDisplay.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      <span>\r\n        {value < 0\r\n          ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\r\n          : value.toString().padStart(3, \"0\")}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import React from \"react\";\r\nimport { CellState, CellValue } from \"../../types\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button: React.FC<{\r\n  row: number;\r\n  col: number;\r\n  state: CellState;\r\n  value: CellValue;\r\n  live: boolean;\r\n  red?: boolean;\r\n  hesDie: boolean;\r\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n}> = ({ state, value, row, col, onClick, onContext, red, live, hesDie }) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (state === CellState.visible) {\r\n      if (value === CellValue.bomb) {\r\n        return (\r\n          <span role={\"img\"} aria-label=\"bomb\">\r\n            üí£\r\n          </span>\r\n        );\r\n      } else if (value !== CellValue.none) {\r\n        return <span>{value}</span>;\r\n      } else if (value === CellValue.none) {\r\n        return null;\r\n      }\r\n    } else if (state === CellState.flagged) {\r\n      return (\r\n        <span role=\"img\" aria-label=\"flag\">\r\n          üö©\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Button ${\r\n        state === CellState.visible ? \"visible\" : \"\"\r\n      } value-${value} ${red ? \"red\" : \"\"} ${live ? \"live\" : \"\"}`}\r\n      onClick={!hesDie ? onClick(row, col) : () => {}}\r\n      onContextMenu={onContext(row, col)}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Cell, CellState, CellValue, Face } from \"../../types\";\r\nimport { generateCells, openMultipleCells } from \"../../utils\";\r\nimport NumberDisplay from \"../NumberDisplay\";\r\nimport Button from \"../Button\";\r\nimport \"./App.scss\";\r\nimport { NO_OF_BOMBS } from \"../../constants\";\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.smile);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [live, setLive] = useState<boolean>(false);\r\n  const [bombCounter, setBombCounter] = useState<number>(NO_OF_BOMBS);\r\n  const [hesLost, setHesLost] = useState<boolean>(false);\r\n  const [hesWon, setHesWon] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const handleMouseDownAndUp = (e: any): void => {\r\n      if (!live) {\r\n        return;\r\n      }\r\n      let isButton: boolean = e.target.className\r\n        .toString()\r\n        .startsWith(\"Button\");\r\n      if (isButton) {\r\n        if (e.type === \"mouseup\") {\r\n          setFace(Face.smile);\r\n        } else if (e.type === \"mousedown\") {\r\n          setFace(Face.oh);\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener(\"mouseup\", handleMouseDownAndUp);\r\n    window.addEventListener(\"mousedown\", handleMouseDownAndUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mouseup\", handleMouseDownAndUp);\r\n      window.removeEventListener(\"mousedown\", handleMouseDownAndUp);\r\n    };\r\n  }, [live]);\r\n\r\n  useEffect(() => {\r\n    if (live && time < 999) {\r\n      const timer = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }\r\n  }, [live, time]);\r\n\r\n  useEffect(() => {\r\n    if (hesLost) {\r\n      setLive(false);\r\n      setFace(Face.lost);\r\n    } else {\r\n      setFace(Face.smile);\r\n    }\r\n  }, [hesLost]);\r\n\r\n  useEffect(() => {\r\n    if (hesWon) {\r\n      setLive(false);\r\n      setFace(Face.won);\r\n    }\r\n  }, [hesWon]);\r\n\r\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n    let newCells: Cell[][] = cells.slice();\r\n\r\n    if (!live) {\r\n      let isBomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n      while (isBomb) {\r\n        newCells = generateCells();\r\n        isBomb = newCells[rowParam][colParam].value === CellValue.bomb;\r\n      }\r\n      setLive(true);\r\n    }\r\n    const currentCell = newCells[rowParam][colParam];\r\n\r\n    if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\r\n      return;\r\n    }\r\n\r\n    if (currentCell.value === CellValue.bomb) {\r\n      setHesLost(true);\r\n      newCells = showAllBombs();\r\n      newCells[rowParam][colParam].red = true;\r\n      setCells(newCells);\r\n      return;\r\n    } else if (currentCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(cells, rowParam, colParam);\r\n    } else {\r\n      // Click on a number\r\n      newCells[rowParam][colParam].state = CellState.visible;\r\n    }\r\n\r\n    // Check Won\r\n    let safeOpenCellsExist: boolean = getSafeOpenCellsExist(cells);\r\n    if (!safeOpenCellsExist) {\r\n      newCells.map((row) =>\r\n        row.map((cell) => {\r\n          if (cell.value === CellValue.bomb) {\r\n            return { ...cell, state: CellState.flagged };\r\n          }\r\n          return cell;\r\n        })\r\n      );\r\n      setHesWon(true);\r\n    }\r\n\r\n    setCells(newCells);\r\n  };\r\n\r\n  const getSafeOpenCellsExist = (cells: Cell[][]) => {\r\n    let numberOfOpenCells = 0;\r\n    cells.forEach((rows) =>\r\n      rows.forEach((currentCell) => {\r\n        if (\r\n          currentCell.value !== CellValue.bomb &&\r\n          currentCell.state === CellState.open\r\n        ) {\r\n          numberOfOpenCells++;\r\n        }\r\n      })\r\n    );\r\n\r\n    return numberOfOpenCells > 0;\r\n  };\r\n\r\n  const handleCellRightClick = (rowParam: number, colParam: number) => (\r\n    e: React.MouseEvent<HTMLDivElement>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (!live) {\r\n      return;\r\n    }\r\n\r\n    const currentCells = cells.slice();\r\n    const currentCell = cells[rowParam][colParam];\r\n    if (currentCell.state === CellState.visible) {\r\n      return;\r\n    } else if (currentCell.state === CellState.open && bombCounter > -99) {\r\n      currentCells[rowParam][colParam].state = CellState.flagged;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter - 1);\r\n    } else if (currentCell.state === CellState.flagged) {\r\n      currentCells[rowParam][colParam].state = CellState.open;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter + 1);\r\n    }\r\n  };\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, cellIndex) => {\r\n        return (\r\n          <Button\r\n            live={live}\r\n            hesDie={hesLost || hesWon}\r\n            key={`${rowIndex - cellIndex}`}\r\n            state={cell.state}\r\n            value={cell.value}\r\n            red={cell.red}\r\n            onClick={handleCellClick}\r\n            onContext={handleCellRightClick}\r\n            row={rowIndex}\r\n            col={cellIndex}\r\n          />\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleFaceClick = (): void => {\r\n    setLive(false);\r\n    setTime(0);\r\n    setBombCounter(NO_OF_BOMBS);\r\n    setCells(generateCells());\r\n    setHesLost(false);\r\n    setHesWon(false);\r\n    setFace(Face.smile);\r\n  };\r\n\r\n  const showAllBombs = (): Cell[][] => {\r\n    let currentCells = cells.slice();\r\n\r\n    return currentCells.map((row) =>\r\n      row.map((cell) => {\r\n        if (cell.value === CellValue.bomb) {\r\n          return { ...cell, state: CellState.visible };\r\n        }\r\n        return cell;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\"13:18\"}\r\n      <div className=\"Header\">\r\n        <NumberDisplay value={bombCounter} />\r\n        <div className=\"Face\">\r\n          <span role=\"img\" aria-label=\"face\" onClick={handleFaceClick}>\r\n            {face}\r\n          </span>\r\n        </div>\r\n        <NumberDisplay value={time} />\r\n      </div>\r\n      <div className=\"Body\">{renderCells()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}