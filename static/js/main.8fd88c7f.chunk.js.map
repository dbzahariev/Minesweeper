{"version":3,"sources":["types/index.tsx","utils/index.tsx","components/NumberDisplay/index.tsx","components/Button/index.tsx","components/App/index.tsx","constants/index.tsx","index.tsx"],"names":["CellValue","CellState","NumberDisplay","value","className","Math","min","toString","padStart","Button","App","useState","cells","setCells","length","row","push","col","none","state","open","generateCells","map","rowIndex","cell","cellIndex","ReactDOM","render","document","getElementById"],"mappings":"qMAAYA,EAWAC,E,wCAXAD,O,eAAAA,I,aAAAA,I,aAAAA,I,iBAAAA,I,eAAAA,I,eAAAA,I,aAAAA,I,gBAAAA,M,cAWAC,O,eAAAA,I,qBAAAA,I,sBAAAA,M,UCRL,I,OCYQC,EARqC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrD,OACE,qBAAKC,UAAU,gBAAf,SACGC,KAAKC,IAAI,IAAKH,GAAOI,WAAWC,SAAS,EAAG,QCHpCC,G,MAJU,WACvB,OAAO,qBAAKL,UAAU,aC4BTM,G,MAzBO,WACpB,MAA0BC,mBAAmB,IAA7C,mBAAOC,EAAP,KAAcC,EAAd,KAEqB,IAAjBD,EAAME,QACRD,EHRyB,WAG3B,IAFA,IAAID,EAAkB,GAEbG,EAAM,EAAGA,EINI,EJMYA,IAAO,CACvCH,EAAMI,KAAK,IACX,IAAK,IAAIC,EAAM,EAAGA,EIPE,EJOcA,IAChCL,EAAMG,GAAKC,KAAK,CAAEb,MAAOH,EAAUkB,KAAMC,MAAOlB,EAAUmB,OAI9D,OAAOR,EGFIS,IASX,OACE,sBAAKjB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,cAAC,EAAD,CAAeD,MAAO,IACtB,qBAAKC,UAAU,OAAf,0BACA,cAAC,EAAD,CAAeD,MAAO,QAExB,qBAAKC,UAAU,OAAf,SAZKQ,EAAMU,KAAI,SAACP,EAAKQ,GAAN,OACfR,EAAIO,KAAI,SAACE,EAAMC,GAAP,OAAqB,cAAC,EAAD,aAAgBF,EAAWE,iB,MEV9DC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.8fd88c7f.chunk.js","sourcesContent":["export enum CellValue {\r\n  none,\r\n  one,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  open,\r\n  visible,\r\n  flagged,\r\n}\r\n\r\nexport type Cell = {\r\n  value: CellValue;\r\n  state: CellState;\r\n};\r\n","import { MAX_ROWS, MAX_COLS } from \"../constants\";\r\nimport { Cell, CellState, CellValue } from \"../types\";\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({ value: CellValue.none, state: CellState.open });\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n","import React from \"react\";\r\nimport \"./NumberDisplay.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      {Math.min(999, value).toString().padStart(3, \"0\")}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import React from \"react\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button: React.FC = () => {\r\n  return <div className=\"Button\"></div>;\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from \"react\";\r\nimport { Cell } from \"../../types\";\r\nimport { generateCells } from \"../../utils\";\r\nimport NumberDisplay from \"../NumberDisplay\";\r\nimport Button from \"../Button\";\r\nimport \"./App.scss\";\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState<Cell[][]>([]);\r\n\r\n  if (cells.length === 0) {\r\n    setCells(generateCells());\r\n  }\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, cellIndex) => <Button key={`${rowIndex - cellIndex}`} />)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Header\">\r\n        <NumberDisplay value={0} />\r\n        <div className=\"Face\">üòÅ</div>\r\n        <NumberDisplay value={23} />\r\n      </div>\r\n      <div className=\"Body\">{renderCells()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}